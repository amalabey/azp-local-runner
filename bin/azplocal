#!/usr/bin/env python3
import argparse
import base64
import requests
from requests.auth import HTTPBasicAuth
import json
import logging
import http.client

httpclient_logger = logging.getLogger("http.client")
AGENT_IMAGE_NAME="dockeragent:latest"

def httpclient_logging_patch(level=logging.DEBUG):
    """Enable HTTPConnection debug logging to the logging framework"""

    def httpclient_log(*args):
        httpclient_logger.log(level, " ".join(args))

    # mask the print() built-in in the http.client module to use
    # logging instead
    http.client.print = httpclient_log
    # enable debugging
    http.client.HTTPConnection.debuglevel = 1

def send_api_request(url, personal_access_token, method="GET", data=None):
    header_value = f":{personal_access_token}"
    header_bytes = header_value.encode('utf-8')
    basic_auth_header_bytes = base64.b64encode(header_bytes)
    basic_auth_header = basic_auth_header_bytes.decode('utf-8')
    headers = {
        "Authorization": f"Basic {basic_auth_header}",
        "Content-Type": "application/json"
    }

    response = requests.request(method, url, headers=headers, data=data)

    # Handle the response
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Request failed with status code {response.status_code}:\n{response.text}")

def run_pipeline(org_url, project_name, pipeline_id, personal_access_token):
    run_api_url = f"{org_url}/{project_name}/_apis/pipelines/{pipeline_id}/runs?api-version=7.0"
    payload = json.dumps({
        "resources": {
            "repositories": {
                "self": {
                    "refName": "refs/heads/master"
                }
            }
        }
    })
    response = send_api_request(run_api_url, personal_access_token, 'POST', payload)
    print(response) 

# Create the argument parser
parser = argparse.ArgumentParser(description='Running and debugging Azure Pipelines on a local docker container')

# Add arguments
parser.add_argument('-o', '--org', type=str, help='Url to Azure DevOps organisation')
parser.add_argument('-p', '--project', type=str, help='Azure DevOps project name')
parser.add_argument('-t', '--token', type=str, help='Personal Access Token to access Azure DevOps')
parser.add_argument('-f', '--file', type=str, help='Azure Pipeline Yaml file')
parser.add_argument('-i', '--id', type=str, help='Pipeline Id from Azure Pipelines (can be found in the url)')
parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")

# Parse the command-line arguments
args = parser.parse_args()

# Access the values of the parsed arguments
org_url = args.org
token = args.token
project_name = args.project
file_path = args.file
pipeline_id = args.id

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
    httpclient_logging_patch()

run_pipeline(org_url, project_name, pipeline_id, token)
