#!/usr/bin/env python3
import argparse
import requests
from requests.auth import HTTPBasicAuth

AGENT_IMAGE_NAME="dockeragent:latest"

def send_api_request(url, personal_access_token, method="GET", data=None):
    headers = {
        "Authorization": f"Bearer {personal_access_token}",
        "Content-Type": "application/json-patch+json"
    }

    response = requests.request(
        method,
        url,
        auth=HTTPBasicAuth("", personal_access_token),
        headers=headers,
        json=data
    )

    # Handle the response
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Request failed with status code {response.status_code}:\n{response.text}")

def run_pipeline(org_url, project_name, pipeline_id, personal_access_token):
    run_api_url = f"{org_url}/{project_name}/_apis/pipelines/{pipeline_id}/runs?api-version=7.0"
    data = "{previewRun:true}"
    response = send_api_request(run_api_url, personal_access_token, data)
    print(response)

# Create the argument parser
parser = argparse.ArgumentParser(description='Running and debugging Azure Pipelines on a local docker container')

# Add arguments
parser.add_argument('-o', '--org', type=str, help='Url to Azure DevOps organisation')
parser.add_argument('-p', '--project', type=str, help='Azure DevOps project name')
parser.add_argument('-t', '--token', type=str, help='Personal Access Token to access Azure DevOps')
parser.add_argument('-f', '--file', type=str, help='Azure Pipeline Yaml file')
parser.add_argument('-i', '--id', type=str, help='Pipeline Id from Azure Pipelines (can be found in the url)')

# Parse the command-line arguments
args = parser.parse_args()

# Access the values of the parsed arguments
org_url = args.org
token = args.token
project_name = args.project
file_path = args.file
pipeline_id = args.id

run_pipeline(org_url, project_name, pipeline_id, token)
